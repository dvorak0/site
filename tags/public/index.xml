<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>PUBLIC on Seeking Complexity</title><link>/tags/public/</link><description>Recent content in PUBLIC on Seeking Complexity</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Tue, 13 Sep 2022 11:57:00 +0800</lastBuildDate><atom:link href="/tags/public/index.xml" rel="self" type="application/rss+xml"/><item><title>黑客与画家</title><link>/posts/20220913115753-%E9%BB%91%E5%AE%A2%E4%B8%8E%E7%94%BB%E5%AE%B6/</link><pubDate>Tue, 13 Sep 2022 11:57:00 +0800</pubDate><guid>/posts/20220913115753-%E9%BB%91%E5%AE%A2%E4%B8%8E%E7%94%BB%E5%AE%B6/</guid><description>1 为什么书呆子不受欢迎 许多书呆子可能都与我一样，直到高中毕业多年后，才去读中学里的指定读物。
确实
我在这篇文章中发表了一些刺耳的意见
希望更多人把内心的“有刺耳”想法分享出来，会有人共鸣
4 良好的坏习惯 公民自由真的是国家富强的原因，而不是结果吗？我认为是的。
是吗？
创业公司 如果你的创业公司正在与一家大公司竞争，这一点就很有利。
一个命题 下面举一个简单的例子说明这个经济学命题。如果你是一个20多岁的优秀黑客，每年的薪水大约是8万美元。这意味着，平均来看，你必须每年至少为公司带来8万美元利润，这样才能保证公司没有亏钱。但是，你的真正工作时间其实可以是公司上班时间的2倍，如果你全神贯注，每小时的产出可以提高3倍。[插图]如果再把大公司里令人讨厌的中间管理层除去（他们经常以主管的身份妨碍你的工作），你的效率可以再提高2倍。还有一个可以提高效率的地方：你不用再完成强行指派给你的工作，尽可以根据自己的愿望，做出最能发挥你聪明才智的成果。假定这会把工作效率再增加三倍。将这些因子放在一起做乘法，你的工作效率将是在公司时的36倍。[插图]如果一个优秀黑客在大公司里的身价是每年8万美元，那么一个勤奋工作、摆脱杂事干扰的聪明黑客，他的工作相当于每年新创造300万美元的价值。
忽悠能力可以
手工艺人 目前还存在的最大的手工艺人群体就是程序员。
确实
可测量性和可放大性 如果你有一个令你感到安全的工作，你是不会致富的，因为没有危险，就几乎等于没有可放大性。
反思
高科技 = 可放大性 俗话说得好，最好的防御就是进攻。如果你开发出来的技术是竞争对手难于复制的，那就够了，你不需要依靠其他防御手段了。一开始就选择较难的问题，此后的各种决策都选择较难的那个选项
选择难的那个吗
偷窃 17世纪的英国很像今天的第三世界，当官是公认的发财职业。
哈哈
11 一百年后的编程语言 essay（论文）这个词来自法语的动词essayer，意思是“试试看”。
创业公司的合气道7 在Viaweb创业期间，我读过大量竞争对手的招聘职位。差不多每个月都有一个新的竞争对手浮出水面。我首先会看他们的产品有没有一个试用版，然后就去找他们的招聘职位。这样过了几年，我就知道哪些公司值得关注，哪些公司不用在意。有些公司的职位描述使用了大量的IT词汇，这样的内容越多，这家公司就越不构成威胁。最不用担心的竞争对手就是那些要求应聘者具有Oracle数据库经验的公司，你永远不必担心他们。如果是招聘C++或Java程序员的公司，对你也不会构成威胁。如果他们招聘Perl或Python程序员，就稍微有点威胁了。至少这听起来像一家技术公司，并且由黑客控制。如果我有幸见到一家招聘Lisp黑客的公司，就会真的感到如临大敌。
再设计 让这两股相反的力量保持平衡是很难的。初出茅庐的年轻黑客都很乐观，自以为做出了伟大的产品，从不反思和改进。上了年纪的黑客又太不自信，甚至故意回避一些挑战性很强的项目。</description></item><item><title>nimby</title><link>/posts/20220628105351-nimby/</link><pubDate>Tue, 28 Jun 2022 10:53:00 +0800</pubDate><guid>/posts/20220628105351-nimby/</guid><description>邻避效应</description></item><item><title>GTD</title><link>/posts/20220527110715-gtd/</link><pubDate>Fri, 27 May 2022 11:07:00 +0800</pubDate><guid>/posts/20220527110715-gtd/</guid><description>https://hamberg.no/gtd GTD in 15 minutes</description></item><item><title>probabilistic_programming</title><link>/posts/20220520111929-probabilistic_programming/</link><pubDate>Fri, 20 May 2022 11:19:00 +0800</pubDate><guid>/posts/20220520111929-probabilistic_programming/</guid><description>say bye to a gaussian world
https://taku-y.github.io/notebook/20170919/slam_advi.html</description></item><item><title>write_it_down</title><link>/posts/20220510210940-write_it_down/</link><pubDate>Tue, 10 May 2022 21:09:00 +0800</pubDate><guid>/posts/20220510210940-write_it_down/</guid><description>putting ideas into words
把想法写下来有很多好处：
帮助自己确定是不是真的想清楚了。会经常出现，在脑海中的一个强烈的自认为清晰的想法，写下来其实很单薄和简单，甚至是错误的。 复合思考，大脑的cache太小，需要一个机制把历史的思考拿出来，以此为起点，继续思考，以做到较为深入的探索。 impact，把你的想法告诉更多人。一方面帮助别人更加了解自己（不确定是不是一定是好处，public_or_private），一方面增加与别人联系的机会。</description></item><item><title>anki</title><link>/posts/20220415110303-anki/</link><pubDate>Fri, 15 Apr 2022 11:03:00 +0800</pubDate><guid>/posts/20220415110303-anki/</guid><description>ankijazz</description></item><item><title>elon_musk_5_step</title><link>/posts/20220321145625-elon_musk_5_step/</link><pubDate>Mon, 21 Mar 2022 14:56:00 +0800</pubDate><guid>/posts/20220321145625-elon_musk_5_step/</guid><description>5-step
MAKE THE REQUIREMENTS LESS DUMB TRY AND DELETE PART OF THE PROCESS SIMPLIFY OR OPTIMIZE ACCELERATE CYCLE TIME AUTOMATE</description></item><item><title>nix</title><link>/posts/20220301101256-nix/</link><pubDate>Tue, 01 Mar 2022 10:12:00 +0800</pubDate><guid>/posts/20220301101256-nix/</guid><description/></item><item><title>SICP</title><link>/posts/20220224200513-sicp/</link><pubDate>Thu, 24 Feb 2022 20:05:00 +0800</pubDate><guid>/posts/20220224200513-sicp/</guid><description>immutability有很多好处，但是对于程序运行效率有很大的影响。 而有一种方法是给语言加上惰性求值的特性，这样就可以编码出来一个“无限长的随机数序列”，但是只有我们访问的时候，才会去真正的生成。
这个想法也呼应了为什么nix作为配置工具，被设计成函数式语言。</description></item><item><title>复合思考</title><link>/posts/20220222101253-%E5%A4%8D%E5%90%88%E6%80%9D%E8%80%83/</link><pubDate>Tue, 22 Feb 2022 10:12:00 +0800</pubDate><guid>/posts/20220222101253-%E5%A4%8D%E5%90%88%E6%80%9D%E8%80%83/</guid><description>forty-year_career中提到：
One section in Coders at Work, I believe it was Joe Armstrong’s, described spending four hours a week thinking about the future. Each week, their thinking would compound on the previous week’s, letting them see further and further into the future. Over time they were dreaming far beyond their contemporaries.
类似的想法还有：
second-order-thinking node &amp;amp; edge 写下思考，内容有两部分：
直观地展示想要什么，可以认为是node 不同的milestone之间的逻辑经不经得起推敲，可以认为是edge</description></item><item><title>public_or_private</title><link>/posts/20220215203814-public_or_private/</link><pubDate>Tue, 15 Feb 2022 20:38:00 +0800</pubDate><guid>/posts/20220215203814-public_or_private/</guid><description/></item><item><title>guide of emacs for vim user</title><link>/posts/20220209192754-emacs/</link><pubDate>Wed, 09 Feb 2022 19:27:00 +0800</pubDate><guid>/posts/20220209192754-emacs/</guid><description>目标用户 singularity追求者 vim vim的modal editing模式非常受欢迎，尤其是以hjkl motion movement为核心的keybinding。
而vim keybinding比vim本身更加流行，浏览器 各种IDE，一些terminal都有vim keybinding。 所以值得一问：
我是喜欢vim还是喜欢vim keybinding
as elisp interpreter emacs最大的特点可能是emacs本身是一个emacs lisp的解释器，大部分emacs的代码都由elisp写成，包括配置文件本身。 与编辑器交互的command，也就是在解释器里执行新的function。
lisp本身是一个很有魅力的语言，简洁的语法，彻底的functional programming支持。 可以在经典教材SICP中看到很全面的介绍。也可以参考Paul Graham的lisp 洗脑文。
另外一点值得一提的是这个lisp解释器的server-client结构。 vim和其他的编译器也有类似的结构，但是可能是因为语言的原因，使用的并不多。 而在emacs中就经常见到一些很灵活的操作，一个我比较喜欢的例子是：org-pomodoro&amp;amp;polybar 写一个shell script，通过 emacsclient -e 执行在emacs配置中声明的一个函数，获取一个文本输出。再把这个shell script放到桌面管理器status line的callback里，做到在桌面显示emacs内部的信息。
org-mode org-mode直接看起来是一个类似markdown的东西，一种标记语法。
使它看起来独特的原因有下面几个点：
structure editing 包括报表在内，有一套比较方便的键盘操作：交换章节、提高/降低层级、加TODO
literal programming 类似jupyter，可以编写代码，边写文档，文档中可以直接包含代码的输出。
digraph G { splines=false; subgraph cluster_1 { problem1[label=&amp;#34;问题&amp;#34;] solve1[label=&amp;#34;解法&amp;#34;] result1[label=&amp;#34;结果&amp;#34;] problem1-&amp;gt;solve1-&amp;gt;result1 } solve2[label=&amp;#34;解法2&amp;#34;] problem1-&amp;gt;solve2-&amp;gt;result1 } GTD 一个永远准备 capture TODO项的GTD系统。
例如正在coding，可以使用 org-capture 加一个TODO
这部分的介绍太多了，应该是很多人入坑emacs的原因。 很多非程序员也在使用emacs，用org-mode做GTD应该算是一个比较主流的原因之一。
we love UI: TUI &amp;amp; GUI emacs是一个完整的GUI程序，所以能享受众多GUI程序的基本人权：</description></item><item><title>about</title><link>/about/</link><pubDate>Sat, 01 Jan 2022 00:00:00 +0800</pubDate><guid>/about/</guid><description>YANG, Zhenfei</description></item><item><title>latency_numbers</title><link>/posts/20211217144946-latency_numbers/</link><pubDate>Fri, 17 Dec 2021 14:49:00 +0800</pubDate><guid>/posts/20211217144946-latency_numbers/</guid><description>延迟 Latency Comparison Numbers (~2012) L1 cache reference 0.5 ns Branch mispredict 5 ns L2 cache reference 7 ns 14x L1 cache Mutex lock/unlock 25 ns Main memory reference 100 ns 20x L2 cache, 200x L1 cache Compress 1K bytes with Zippy 3,000 ns 3 us Send 1K bytes over 1 Gbps network 10,000 ns 10 us Read 4K randomly from SSD* 150,000 ns 150 us ~1GB/sec SSD Read 1 MB sequentially from memory 250,000 ns 250 us Round trip within same datacenter 500,000 ns 500 us Read 1 MB sequentially from SSD* 1,000,000 ns 1,000 us 1 ms ~1GB/sec SSD, 4X memory Disk seek 10,000,000 ns 10,000 us 10 ms 20x datacenter roundtrip Read 1 MB sequentially from disk 20,000,000 ns 20,000 us 20 ms 80x memory, 20X SSD Send packet CA-&amp;gt;Netherlands-&amp;gt;CA 150,000,000 ns 150,000 us 150 ms Notes</description></item><item><title>geometric_algebra</title><link>/posts/20211215182434-geometric_algebra/</link><pubDate>Wed, 15 Dec 2021 18:24:00 +0800</pubDate><guid>/posts/20211215182434-geometric_algebra/</guid><description>A Swift Introduction to Geometric Algebra</description></item><item><title>冥想</title><link>/posts/20211213123832-%E5%86%A5%E6%83%B3/</link><pubDate>Mon, 13 Dec 2021 12:38:00 +0800</pubDate><guid>/posts/20211213123832-%E5%86%A5%E6%83%B3/</guid><description>netflix的冥想正念指南
冥想就像是坐在路边，看思绪如车辆一般驶入，但是我们并不参与其中。
如何爱上生活 找到感恩的瞬间，感受这个瞬间的状态，强化这种感觉
如何面对压力 对冥想时的杂念进行标记，是思绪还是压力
如何善待他人 想象一个画面，自己 关心的人 讨厌的人，都在某些信号下(阳光洒满全身)，满脸笑容，感受他的快乐
如何应对身体伤痛 想象扫描身体，感受疼痛但是不参与
如何应对愤怒 想象一个关心的人坐在对面，在吸气时把他的痛苦吸走，在呼气时用幸福快乐的感觉填充。同样是一个用来把自己中立出来，观察真正的事务的方法。</description></item><item><title>证伪</title><link>/posts/20211213123539-%E8%AF%81%E4%BC%AA/</link><pubDate>Mon, 13 Dec 2021 12:35:00 +0800</pubDate><guid>/posts/20211213123539-%E8%AF%81%E4%BC%AA/</guid><description>Motivation 如果一个理论可以强大地推导出任意理论，可能反而是无意义的。
历史上一个参考是弗洛伊德的对梦的解释。还有被熟知的：房间里有一头无法被任何方法探测的大象。
应用 一个理论，被定义属于科学的一个条件：可能被“未来的”某种现象打败。
补充 证伪的定义主要是为了区分方便，本身是个中立，正如科学在一众宗教的关系。
不需要区分高下。
存在许多无法证伪的理论，也可以给我们许多启发，或者至少是一种难得的寄托吧。</description></item><item><title>double-entry_bookkeeping</title><link>/posts/20211213123003-double_entry_bookkeeping/</link><pubDate>Mon, 13 Dec 2021 12:30:00 +0800</pubDate><guid>/posts/20211213123003-double_entry_bookkeeping/</guid><description>double entry</description></item><item><title>declarative_programming</title><link>/posts/20211202120838-declarative_programming/</link><pubDate>Thu, 02 Dec 2021 12:08:00 +0800</pubDate><guid>/posts/20211202120838-declarative_programming/</guid><description> declarative imperative Lisp C TensorFlow PyTorth Nix Apt/Pacman SQL ORM CMake/Makefile build.sh Halide OpenMP/thread pool Symbolic Diff (symforce) Automatic Diff (JAX/Jet)</description></item><item><title>low_latency_audio</title><link>/posts/20211130195311-low_latency_audio/</link><pubDate>Tue, 30 Nov 2021 19:53:00 +0800</pubDate><guid>/posts/20211130195311-low_latency_audio/</guid><description> jacktrip farplay jamulus</description></item><item><title>tools</title><link>/posts/20211115121752-tools/</link><pubDate>Mon, 15 Nov 2021 12:17:00 +0800</pubDate><guid>/posts/20211115121752-tools/</guid><description>singularity 这里记录能帮助尽快接近singularity的方法。
一般来说，学习曲线陡峭~=能形成累计优势：
一次学习， 终生 受用 不与非开放平台绑定 越用越熟练，上限高，不会浪费时间投入 我的工具 emacs nix/nixos/home-manager anki woboq i3wm+i3block bitwarden DONE RSSHub整理 chromeos: linux+android rime：跨平台词库同步 双拼 intro nixos i3 emacs lsp rust c++ python javascript</description></item><item><title>zettelkasten</title><link>/posts/20211115110725-zettelkasten/</link><pubDate>Mon, 15 Nov 2021 11:07:00 +0800</pubDate><guid>/posts/20211115110725-zettelkasten/</guid><description/></item><item><title>books</title><link>/posts/20211115172735-books/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/posts/20211115172735-books/</guid><description>ray dalio 债务危机 原则 小说 长安十二时辰 兰亭序杀局 扫鼠岭 挽救计划 生死疲劳 传记 曾国藩传 哲学 刘擎西方现代思想讲义 法学的故事 论语故事 no_ego 社会科学 组织的逻辑 团队合作的五大障碍 贫穷的秘密 team of teams 置身事内 经济解释 创建系统学 复杂 也许你该找个人聊聊 hacking 黑客与画家 SICP</description></item></channel></rss>